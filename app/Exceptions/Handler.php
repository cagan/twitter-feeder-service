<?php

namespace App\Exceptions;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{

    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(
            function (Throwable $e) {
                //
            }
        );
    }

    public function render($request, Throwable $e)
    {
        if ($e instanceof MethodNotAllowedHttpException) {
            return response()->json(
                [
                    'status' => 'error',
                    'message' => 'method not allowed',
                ],
                JsonResponse::HTTP_METHOD_NOT_ALLOWED
            );
        }

        if ($e instanceof NotFoundHttpException) {
            return response()->json(
                [
                    'status' => 'error',
                    'message' => 'Url not found',
                ],
                JsonResponse::HTTP_NOT_FOUND
            );
        }

        if ($e instanceof AuthorizationException) {
            return response()->json(
                [
                    'status' => 'error',
                    'message' => 'This action is unauthorized',
                ],
                JsonResponse::HTTP_FORBIDDEN
            );
        }

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if ($request->hasHeader('authorization')) {
            return response()->json(
                [
                    'status' => 'unauthorized',
                    'message' => 'Bearer token is invalid',
                ],
                JsonResponse::HTTP_UNAUTHORIZED
            );
        }
        return response()->json(
            [
                'status' => 'unauthorized',
                'message' => 'Bearer token required',
            ],
            JsonResponse::HTTP_UNAUTHORIZED
        );
    }
}
